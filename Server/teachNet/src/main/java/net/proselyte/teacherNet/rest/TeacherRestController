package net.proselyte.teacherNet.rest;

import net.proselyte.teacherNet.model.Customer;
import net.proselyte.teacherNet.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/api/teachers/")
public class TeacherRestController {

    @Autowired
    private TeacherService teacherService;

    @RequestMapping(value = "{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<Teacher> getTeacher(@PathVariable("id") Long teacherId) {
        if (teacherId == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        Teacher teacher = this.teacherService.getById(teacherId);

        if (teacher == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        return new ResponseEntity<>(customer, HttpStatus.OK);
    }

    @RequestMapping(value = "", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<Teacher> saveCustomer(@RequestBody @Valid Customer customer) {
        HttpHeaders headers = new HttpHeaders();

        if (teacher == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        this.teacherService.save(teacher);
        return new ResponseEntity<>(teacher, headers, HttpStatus.CREATED);
    }

    @RequestMapping(value = "", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<Teacher> updateCustomer(@RequestBody @Valid Teacher teacher, UriComponentsBuilder builder) {
        HttpHeaders headers = new HttpHeaders();

        if (teacher == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        this.teacherService.save(teacher);

        return new ResponseEntity<>(teacher, headers, HttpStatus.OK);
    }

    @RequestMapping(value = "{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<Teacher> deleteCustomer(@PathVariable("id") Long id) {
        Teacher teacher = this.teacherService.getById(id);

        if (teacher == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        this.teacherService.delete(id);

        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @RequestMapping(value = "", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<List<Teacher>> getAllTeachers() {
        List<Teacher> teachers = this.teacherService.getAll();

        if (teachers.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        return new ResponseEntity<>(customers, HttpStatus.OK);
    }
}